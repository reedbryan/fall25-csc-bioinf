# dbg.codon
from copy import copy

def reverse_complement(key: str) -> str:
    complement: dict[str, str] = {'A': 'T', 'T': 'A', 'G': 'C', 'C': 'G'}
    chars: list[str] = list(key[::-1])
    for i in range(len(chars)):
        chars[i] = complement[chars[i]]
    return ''.join(chars)


class Node:
    def __init__(self, kmer: str):
        # Seed with a dummy to force set[int] realization, then remove it
        self._children = set([0])
        self._children.discard(0)

        self._count: int = 0
        self.kmer: str = kmer
        self.visited: bool = False
        self.depth: int = 0
        self.max_depth_child: int = -1  # -1 = no child

    def add_child(self, child_idx: int) -> None:
        self._children.add(child_idx)

    def increase(self) -> None:
        self._count += 1

    def reset(self) -> None:
        self.visited = False
        self.depth = 0
        self.max_depth_child = -1

    def get_count(self) -> int:
        return self._count

    def get_children(self) -> list[int]:
        return list(self._children)

    def remove_children(self, target_set) -> None:
        # target_set is a set[int]
        self._children = self._children - target_set


class DBG:
    def __init__(self, k: int, data_list: list[list[str]]):
        self.k: int = k

        # Seed with a dummy entry to force dict[int, Node] realization, then remove it
        self.nodes = {0: Node("")}
        del self.nodes[0]

        # Explicitly typed str->int dict avoids NoneType hashing issues
        self.kmer2idx: dict[str, int] = {}
        self.kmer_count: int = 0

        self._check(data_list)
        self._build(data_list)

    def _check(self, data_list: list[list[str]]) -> None:
        assert len(data_list) > 0
        assert self.k <= len(data_list[0][0])

    def _build(self, data_list: list[list[str]]) -> None:
        for data in data_list:
            for original in data:
                rc = reverse_complement(original)
                for i in range(len(original) - self.k - 1):
                    self._add_arc(original[i:i+self.k], original[i+1:i+1+self.k])
                    self._add_arc(rc[i:i+self.k], rc[i+1:i+1+self.k])

    def show_count_distribution(self) -> None:
        count: list[int] = [0] * 30
        for idx in self.nodes:
            c = self.nodes[idx].get_count()
            if 0 <= c < len(count):
                count[c] += 1
        print(count[0:10])

    def _add_node(self, kmer: str) -> int:
        if kmer not in self.kmer2idx:
            self.kmer2idx[kmer] = self.kmer_count
            self.nodes[self.kmer_count] = Node(kmer)
            self.kmer_count += 1
        idx: int = self.kmer2idx[kmer]
        self.nodes[idx].increase()
        return idx

    def _add_arc(self, kmer1: str, kmer2: str) -> None:
        idx1: int = self._add_node(kmer1)
        idx2: int = self._add_node(kmer2)
        self.nodes[idx1].add_child(idx2)

    def _get_count(self, child_idx: int) -> int:
        return self.nodes[child_idx].get_count()

    def _get_sorted_children(self, idx: int) -> list[int]:
        children: list[int] = self.nodes[idx].get_children()
        children.sort(key=self._get_count, reverse=True)
        return children

    def _get_depth(self, idx: int) -> int:
        node = self.nodes[idx]
        if not node.visited:
            node.visited = True
            children = self._get_sorted_children(idx)
            max_depth: int = 0
            max_child: int = -1
            for child in children:
                depth = self._get_depth(child)
                if depth > max_depth:
                    max_depth = depth
                    max_child = child
            node.depth = max_depth + 1
            node.max_depth_child = max_child
        return node.depth

    def _reset(self) -> None:
        for idx in list(self.nodes.keys()):
            self.nodes[idx].reset()

    def _get_longest_path(self) -> list[int]:
        max_depth: int = 0
        max_idx: int = -1
        for idx in self.nodes.keys():
            depth = self._get_depth(idx)
            if depth > max_depth:
                max_depth = depth
                max_idx = idx

        path: list[int] = []
        while max_idx != -1:
            path.append(max_idx)
            max_idx = self.nodes[max_idx].max_depth_child
        return path

    def _delete_path(self, path: list[int]) -> None:
        for idx in path:
            if idx in self.nodes:
                del self.nodes[idx]
        path_set = set(path)  # set[int]
        for idx in self.nodes.keys():
            self.nodes[idx].remove_children(path_set)

    # returns str or None
    def _concat_path(self, path: list[int]):
        if len(path) < 1:
            return None
        concat: str = copy(self.nodes[path[0]].kmer)
        for i in range(1, len(path)):
            concat += self.nodes[path[i]].kmer[-1]
        return concat

    # returns str or None
    def get_longest_contig(self):
        self._reset()
        path = self._get_longest_path()
        contig = self._concat_path(path)
        self._delete_path(path)
        return contig


if __name__ == "__main__":
    k: int = 3
    reads1: list[str] = ["ATGCGATG", "GATGCTA"]
    reads2: list[str] = ["ATGCGATG", "ATGCGATG"]
    dbg = DBG(k=k, data_list=[reads1, reads2])
    print("Longest contig:", dbg.get_longest_contig())
